{
  "ownKey": "wiki",
  "childrenPages": {"wiki": {
    "ownKey": "wiki",
    "childrenPages": {
      "license": {
        "ownKey": "license",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "/JacquardSDKAndroid",
            "fileName": "license",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "/JacquardSDKAndroid/wiki/license"
          },
          "next": {
            "path": "wiki",
            "baseUrl": "/JacquardSDKAndroid",
            "fileName": "cloud-api-terms",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "/JacquardSDKAndroid/wiki/cloud-api-terms"
          },
          "previous": {
            "path": "wiki",
            "baseUrl": "/JacquardSDKAndroid",
            "fileName": "releases",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "/JacquardSDKAndroid/wiki/releases"
          },
          "description": "",
          "title": "License",
          "content": "<p>JacquardSDK is licensed under the Apache License, Version 2.0.<\/p>\n<div id=\"license_content\">\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2021 Google LLC.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n<\/div>\n"
        }]
      },
      "apis": {
        "ownKey": "apis",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "/JacquardSDKAndroid",
            "fileName": "apis",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "/JacquardSDKAndroid/wiki/apis"
          },
          "next": {
            "path": "wiki",
            "baseUrl": "/JacquardSDKAndroid",
            "fileName": "generate-docs",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "/JacquardSDKAndroid/wiki/generate-docs"
          },
          "previous": {
            "path": "wiki",
            "baseUrl": "/JacquardSDKAndroid",
            "fileName": "integration",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "/JacquardSDKAndroid/wiki/integration"
          },
          "description": "",
          "title": "API overview",
          "content": "<h2 id=\"guiding-principles\"><a href=\"#guiding-principles\" id=\"guiding-principles\" class=\"anchor\"><\/a>Guiding principles<\/h2>\n<p>The Jacquard SDK provides an easy way to interact with Jacquard tags and gear, handling all the aspects of Bluetooth and our hardware protocol. In common with any SDK dealing with hardware, using the Jacquqard SDK requires dealing with a lot of asynchronous events. The Jacquard team\u2019s experience with this and other products has informed the design of this SDK to help you with this complexity. If you follow the patterns in our sample code you will avoid many common pitfalls and edge cases.<\/p>\n<h3 id=\"making-invalid-state-unrepresentable\"><a href=\"#making-invalid-state-unrepresentable\" id=\"making-invalid-state-unrepresentable\" class=\"anchor\"><\/a>Making invalid state unrepresentable<\/h3>\n<p>The principle coined and popularized by Yaron Minsky of making illegal states unrepresentable is very relevant to a hardware SDK. The goal is that the SDK should be difficult to use incorrectly. Achieving this goal takes careful API design, and we welcome any feedback about cases where you find we have missed the mark.<\/p>\n<p>There are two main tools we use to achieve this. The first is using the Swift type system to reflect instance capabilities and requirements. The second is using Combine to provide a pattern where attempting to use a stale or disconnected Tag instance is precluded (more on this in the next section).<\/p>\n<h2 id=\"connecting-to-tags\"><a href=\"#connecting-to-tags\" id=\"connecting-to-tags\" class=\"anchor\"><\/a>Connecting to Tags<\/h2>\n<p>A JacquardManager instance allows you to find advertising Jacquard tags and connect to them, yielding a ConnectedTag instance (and an updated one any time the connection is lost and reconnected). This ConnectedTag instance is what you will use to access the tag and gear functionality.<\/p>\n<p><img src=\"../../assets/media/apis/connect.png\" alt=\"Block diagram showing JacquardManager.connect\" /><\/p>\n<h2 id=\"connectedtag\"><a href=\"#connectedtag\" id=\"connectedtag\" class=\"anchor\"><\/a>ConnectedTag<\/h2>\n<p>Once you have obtained a ConnectedTag instance from the connect publisher you can use it to send Commands and subscribe to Notifications. Some commands work with just a connection to the Tag, others require Jacquard garment or gear attached - the attachment state can also be observed via the ConnectedTag.<\/p>\n<p><img src=\"../../assets/media/apis/connected.png\" alt=\"Block diagram showing ConnectedTag\" /><\/p>\n"
        }]
      },
      "conduct": {
        "ownKey": "conduct",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "/JacquardSDKAndroid",
            "fileName": "conduct",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "/JacquardSDKAndroid/wiki/conduct"
          },
          "previous": {
            "path": "wiki",
            "baseUrl": "/JacquardSDKAndroid",
            "fileName": "contributing",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "/JacquardSDKAndroid/wiki/contributing"
          },
          "description": "",
          "title": "Code of Conduct",
          "content": "<h2 id=\"our-pledge\"><a href=\"#our-pledge\" id=\"our-pledge\" class=\"anchor\"><\/a>Our Pledge<\/h2>\n<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.<\/p>\n<h2 id=\"our-standards\"><a href=\"#our-standards\" id=\"our-standards\" class=\"anchor\"><\/a>Our Standards<\/h2>\n<p>Examples of behavior that contributes to creating a positive environment include:<\/p>\n<ul>\n<li>Using welcoming and inclusive language<\/li>\n<li>Being respectful of differing viewpoints and experiences<\/li>\n<li>Gracefully accepting constructive criticism<\/li>\n<li>Focusing on what is best for the community<\/li>\n<li>Showing empathy towards other community members<\/li>\n<\/ul>\n<p>Examples of unacceptable behavior by participants include:<\/p>\n<ul>\n<li>The use of sexualized language or imagery and unwelcome sexual attention or advances<\/li>\n<li>Trolling, insulting/derogatory comments, and personal or political attacks<\/li>\n<li>Public or private harassment<\/li>\n<li>Publishing others\u2019 private information, such as a physical or electronic address, without explicit permission<\/li>\n<li>Other conduct which could reasonably be considered inappropriate in a professional setting<\/li>\n<\/ul>\n<h2 id=\"our-responsibilities\"><a href=\"#our-responsibilities\" id=\"our-responsibilities\" class=\"anchor\"><\/a>Our Responsibilities<\/h2>\n<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.<\/p>\n<p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.<\/p>\n<h2 id=\"scope\"><a href=\"#scope\" id=\"scope\" class=\"anchor\"><\/a>Scope<\/h2>\n<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.<\/p>\n<p>This Code of Conduct also applies outside the project spaces when the Project Steward has a reasonable belief that an individual\u2019s behavior may have a negative impact on the project or its community.<\/p>\n<h2 id=\"conflict-resolution\"><a href=\"#conflict-resolution\" id=\"conflict-resolution\" class=\"anchor\"><\/a>Conflict Resolution<\/h2>\n<p>We do not believe that all conflict is bad; healthy debate and disagreement often yield positive results. However, it is never okay to be disrespectful or to engage in behavior that violates the project\u2019s code of conduct.<\/p>\n<p>If you see someone violating the code of conduct, you are encouraged to address the behavior directly with those involved. Many issues can be resolved quickly and easily, and this gives people more control over the outcome of their dispute. If you are unable to resolve the matter for any reason, or if the behavior is threatening or harassing, report it. We are dedicated to providing an environment where participants feel welcome and safe.<\/p>\n<p>Reports should be directed to [PROJECT STEWARD NAME(s) AND EMAIL(s)], the Project Steward(s) for [PROJECT NAME]. It is the Project Steward\u2019s duty to receive and address reported violations of the code of conduct. They will then work with a committee consisting of representatives from the Open Source Programs Office and the Google Open Source Strategy team. If for any reason you are uncomfortable reaching out to the Project Steward, please email <a href=\"mailto:opensource@google.com\">opensource@google.com<\/a>.<\/p>\n<p>We will investigate every complaint, but you may not receive a direct response. We will use our discretion in determining when and how to follow up on reported incidents, which may range from not taking action to permanent expulsion from the project and project-sponsored spaces. We will notify the accused of the report and provide them an opportunity to discuss it before any action is taken. The identity of the reporter will be omitted from the details of the report supplied to the accused. In potentially harmful situations, such as ongoing harassment or threats to anyone\u2019s safety, we may take action without notice.<\/p>\n<h2 id=\"attribution\"><a href=\"#attribution\" id=\"attribution\" class=\"anchor\"><\/a>Attribution<\/h2>\n<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at <a href=\"https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\">https://www.contributor-covenant.org/version/1/4/code-of-conduct.html<\/a><\/p>\n"
        }]
      },
      "integration": {
        "ownKey": "integration",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "/JacquardSDKAndroid",
            "fileName": "integration",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "/JacquardSDKAndroid/wiki/integration"
          },
          "next": {
            "path": "wiki",
            "baseUrl": "/JacquardSDKAndroid",
            "fileName": "apis",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "/JacquardSDKAndroid/wiki/apis"
          },
          "previous": {
            "path": "wiki",
            "baseUrl": "/JacquardSDKAndroid",
            "fileName": "codelabs",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "/JacquardSDKAndroid/wiki/codelabs"
          },
          "description": "",
          "title": "Integration",
          "content": "<p>It's easy to integrate the Jacquard SDK using Maven.<\/p>\n<p>You need to include GMaven in your repositories section of your gradle file:<\/p>\n<pre><code>  repositories {\n    maven {\n        url &quot;https://maven.google.com/&quot;\n    }\n  }\n<\/code><\/pre>\n<p>Then include Jacquard in the <code>dependencies<\/code> section:<\/p>\n<pre><code>  implementation &quot;com.google.jacquard:jacquard-sdk:1.0.0&quot;\n<\/code><\/pre>\n"
        }]
      },
      "contributing": {
        "ownKey": "contributing",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "/JacquardSDKAndroid",
            "fileName": "contributing",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "/JacquardSDKAndroid/wiki/contributing"
          },
          "next": {
            "path": "wiki",
            "baseUrl": "/JacquardSDKAndroid",
            "fileName": "conduct",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "/JacquardSDKAndroid/wiki/conduct"
          },
          "previous": {
            "path": "wiki",
            "baseUrl": "/JacquardSDKAndroid",
            "fileName": "cloud-api-terms",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "/JacquardSDKAndroid/wiki/cloud-api-terms"
          },
          "description": "",
          "title": "Contributing",
          "content": "<h1 id=\"jacquard-sdk\"><a href=\"#jacquard-sdk\" id=\"jacquard-sdk\" class=\"anchor\"><\/a>Jacquard SDK<\/h1>\n<p>Contributions to this project are welcomed. We request that you\nread through the guidelines before getting started.<\/p>\n<h2 id=\"contributor-license-agreement\"><a href=\"#contributor-license-agreement\" id=\"contributor-license-agreement\" class=\"anchor\"><\/a>Contributor License Agreement<\/h2>\n<p>Contributions to this project must be accompanied by a Contributor License\nAgreement (CLA). You (or your employer) retain the copyright to your\ncontribution; this simply gives us permission to use and redistribute your\ncontributions as part of the project. Head over to\n<a href=\"https://cla.developers.google.com/\">https://cla.developers.google.com/<\/a> to see your current agreements on file or\nto sign a new one.<\/p>\n<p>You generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.<\/p>\n<h2 id=\"community-guidelines\"><a href=\"#community-guidelines\" id=\"community-guidelines\" class=\"anchor\"><\/a>Community guidelines<\/h2>\n<p>This project follows\n<a href=\"https://opensource.google/conduct/\">Google's Open Source Community Guidelines<\/a>.<\/p>\n<h2 id=\"contribution\"><a href=\"#contribution\" id=\"contribution\" class=\"anchor\"><\/a>Contribution<\/h2>\n<h3 id=\"code-reviews\"><a href=\"#code-reviews\" id=\"code-reviews\" class=\"anchor\"><\/a>Code reviews<\/h3>\n<p>All submissions will be reviewed before merging. Submissions are reviewed using\n<a href=\"https://help.github.com/articles/about-pull-requests/\">GitHub pull requests<\/a>.<\/p>\n"
        }]
      },
      "cloud-api-terms": {
        "ownKey": "cloud-api-terms",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "/JacquardSDKAndroid",
            "fileName": "cloud-api-terms",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "/JacquardSDKAndroid/wiki/cloud-api-terms"
          },
          "next": {
            "path": "wiki",
            "baseUrl": "/JacquardSDKAndroid",
            "fileName": "contributing",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "/JacquardSDKAndroid/wiki/contributing"
          },
          "previous": {
            "path": "wiki",
            "baseUrl": "/JacquardSDKAndroid",
            "fileName": "license",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "/JacquardSDKAndroid/wiki/license"
          },
          "description": "",
          "title": "Cloud API Terms",
          "content": "<h1 id=\"jacquard-cloud-apis\"><a href=\"#jacquard-cloud-apis\" id=\"jacquard-cloud-apis\" class=\"anchor\"><\/a>Jacquard Cloud APIs<\/h1>\n<ul>\n<li>The firmware updating portions of the Jacquard SDK rely on access to\nJacquard Cloud APIs to list and fetch firmware updates for Jacquard\ntags.<\/li>\n<li>To enable this access, the SDK requires an API Key.<\/li>\n<li>Use of the Jacquard Cloud API requires agreeing to the below Terms\nof Service.<\/li>\n<li>The Jacquard Cloud API is designed to be used only via the\nJacquard SDK and your app code should not access it directly.<\/li>\n<li>Once you have read and agreed to the Terms of Service, click the\ncheckbox below to obtain a temporary API key suitable for testing,\nexploration and/or other such preliminary uses.<\/li>\n<\/ul>\n<h1 id=\"terms-of-service-for-use-of-the-jacquard-cloud-api-for-use-with-software-development-kit-the-jacquard-sdk\"><a href=\"#terms-of-service-for-use-of-the-jacquard-cloud-api-for-use-with-software-development-kit-the-jacquard-sdk\" id=\"terms-of-service-for-use-of-the-jacquard-cloud-api-for-use-with-software-development-kit-the-jacquard-sdk\" class=\"anchor\"><\/a>Terms of Service for Use of the Jacquard Cloud API for Use with Software Development Kit (the \u201cJacquard SDK\u201d)<\/h1>\n<p><strong>By using the Jacquard Cloud API (and accepting a Google API key), you\nagree that your use of Jacquard Cloud API (along with the Google API\nkey) is governed by the Terms of Service herein.<\/strong><\/p>\n<p><strong>If you signed an offline agreement with Google for use the\nJacquard Cloud API, then, the terms below do not apply to your use\nof Jacquard Cloud API, and your offline terms govern your use of\nthe Jacquard Cloud API.<\/strong><\/p>\n<h3 id=\"1-explanatory-notes--jacquard-sdk-google-api-key--the-jacquard-cloud-api\"><a href=\"#1-explanatory-notes--jacquard-sdk-google-api-key--the-jacquard-cloud-api\" id=\"1-explanatory-notes--jacquard-sdk-google-api-key--the-jacquard-cloud-api\" class=\"anchor\"><\/a>1. Explanatory Notes \u2013 Jacquard SDK, Google API Key &amp; the Jacquard Cloud API.<\/h3>\n<p>As background, please note:<\/p>\n<ol type=\"i\">\n\n<li> The portion of the Jacquard SDK that enables firmware updates\n     relies on access to the Jacquard Cloud API to list and fetch firmware\n     updates to Jacquard Tags.\n<li> In order to access the firmware updates to the Jacquard SDK, the\n     Jacquard SDK requires you to provide a Google API key to access all of\n     the relevant Jacquard Cloud API functions;\n<li> The Jacquard Cloud API is designed to, and may only, be used with\n     the Jacquard SDK and your app code may not access it directly;\n<li> The Jacquard Cloud API is currently a developer preview version\n     and can be used for testing, exploration and/or other such preliminary\n     uses; and\n<li> For purposes of clarity, the API ToS refers solely to the\n     Jacquard Cloud API and Google API key, and your access and specific\n     use of the Jacquard SDK is governed by a separate license agreement.\n<\/ol>\n<h3 id=\"2-terms-of-service-of-the-jacquard-cloud-api\"><a href=\"#2-terms-of-service-of-the-jacquard-cloud-api\" id=\"2-terms-of-service-of-the-jacquard-cloud-api\" class=\"anchor\"><\/a>2. Terms of Service of the Jacquard Cloud API.<\/h3>\n<p>By downloading, receiving and/or using the Jacquard Cloud API\n(including the Google API key), you agree to, and consent to be bound\nby, the Google APIs Terms of Service (&quot;API ToS&quot; aka \u201cTerms\u201d as stated\nin the API ToS) located at:\nhttps://console.cloud.google.com/tos?id=universal.  In addition, you\nacknowledge and agree to comply with the following \u201cadditional terms\u201d\n(as further defined in the API ToS) apply to your use of the Jacquard\nCloud API (and the Google API key):<\/p>\n<ol type=\"a\">\n<li> To only use the Google API key to access and use the Jacquard\n     Cloud API in accordance with the API ToS;\n<li> Not use the Google API key to ship a final product/app;\n<li> The Google API key that you are receiving now is a temporary API\n     key, and in the future, a process may become available to obtain a\n     production-use API key and this process will most likely require\n     registration;\n<li> That your use of the API key may be extinguished and/or revoked\n     by Google at any time in Google\u2019s sole discretion without liability to\n     you or any third party; and\n<li> To only use the API key and Jacquard Cloud API with the Jacquard\n     SDK.\n<\/ol>\n<h2 id=\"api-key\"><a href=\"#api-key\" id=\"api-key\" class=\"anchor\"><\/a>API Key<\/h2>\n<p><label><input type=\"checkbox\" name=\"apiKeyCheckbox\" value=\"Agree\">In\norder to obtain your temporary API key, please \u201cclick\u201d this box to\nindicate that you acknowledge and agree &amp; consent to these Terms of\nService for Use of the Jacquard Cloud API for Use with Software\nDevelopment Kit (the \u201cJacquard SDK\u201d).<\/label><\/p>\n<div id=\"temporaryAPIKey\" style=\"display: none;\">\n<h3>Temporary API Key<\/h3>\n<pre> %TEMPORARY_API_KEY%<\/pre>\n<\/div>\n<script>\nwindow.onload = function(){\n  $('input[type=\"checkbox\"]').click(function(){\n    $(\"#temporaryAPIKey\").show();\n    $(this).attr(\"disabled\", true);\n  });\n};\n<\/script>\n"
        }]
      },
      "tutorial": {
        "ownKey": "tutorial",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "/JacquardSDKAndroid",
            "fileName": "tutorial",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "/JacquardSDKAndroid/wiki/tutorial"
          },
          "next": {
            "path": "wiki",
            "baseUrl": "/JacquardSDKAndroid",
            "fileName": "codelabs",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "/JacquardSDKAndroid/wiki/codelabs"
          },
          "description": "",
          "title": "Tutorial",
          "content": "<p>In this tutorial you will learn how to integrate the Jacquard SDK into\nan Android app, scan and connect to a tag, send commands and respond to\nnotifications using Android Studio.<\/p>\n<p>You will need:<\/p>\n<ol>\n<li>Some Jacquard gear. You can order it <a href=\"https://atap.google.com/jacquard/products/\">here<\/a>.<\/li>\n<li>An Android device (since the Jacquard SDK uses Bluetooth to connect to\nyour tag the simulator won't work).<\/li>\n<\/ol>\n<h2 id=\"table-of-contents\"><a href=\"#table-of-contents\" id=\"table-of-contents\" class=\"anchor\"><\/a>Table of contents<\/h2>\n<ol>\n<li><a href=\"#section1\">Prepare your Jacquard Tag<\/a><\/li>\n<li><a href=\"#section2\">Create a new Android project<\/a><\/li>\n<li><a href=\"#section3\">Integrate Jacquard SDK<\/a><\/li>\n<li><a href=\"#section4\">Add the scanning RecyclerView<\/a><\/li>\n<li><a href=\"#section5\">Displaying the advertised tags and populating the RecyclerView<\/a><\/li>\n<li><a href=\"#section6\">Displaying already connected tags<\/a><\/li>\n<li><a href=\"#section7\">Connecting to tags<\/a><\/li>\n<\/ol>\n<h2 id=\"1-prepare-your-jacquard-tag\"><a href=\"#1-prepare-your-jacquard-tag\" id=\"1-prepare-your-jacquard-tag\" class=\"anchor\"><\/a><a name=\"section1\"><\/a>1. Prepare your Jacquard Tag<\/h2>\n<p>To ensure the smoothest path through this tutorial, go to Android\nBluetooth settings, find the entry for your Jacquard Tag and choose\n&quot;Forget this device&quot;.<\/p>\n<h2 id=\"2-create-a-new-android-project\"><a href=\"#2-create-a-new-android-project\" id=\"2-create-a-new-android-project\" class=\"anchor\"><\/a><a name=\"section2\"><\/a>2. Create a new Android project<\/h2>\n<p>In Android Studio, create a new Android project.<\/p>\n<blockquote>\n<p>File menu -&gt; New -&gt; New Project...<\/p>\n<\/blockquote>\n<p><img src=\"../../assets/media/tutorial/create_new_project.png\" alt=\"Android Studio new project dialog\" /><\/p>\n<p>Select <code>No Activity<\/code> as your project template then create the project.<\/p>\n<h2 id=\"3-integrate-jacquard-sdk\"><a href=\"#3-integrate-jacquard-sdk\" id=\"3-integrate-jacquard-sdk\" class=\"anchor\"><\/a><a name=\"section3\"><\/a>3. Integrate Jacquard SDK<\/h2>\n<p>It's easy to integrate the Jacquard SDK using Maven. First, you need to include GMaven into your project gradle file - <code>build.gradle (Project: Jacquard_Tutorial)<\/code>.<\/p>\n<pre><code class=\"language-java\">allprojects {\n  repositories {\n    ...\n    maven {\n        url &quot;https://maven.google.com/&quot;\n    }\n  }\n}\n<\/code><\/pre>\n<p>Then you need to include Jacquard in the <code>dependencies<\/code> section of your application's gradle file - <code>build.gradle (Module: Jacquard_Tutorial.app)<\/code>.\nYou might need to expand the Gradle Scripts dropdown in the Project panel on the left.<\/p>\n<pre><code class=\"language-java\">implementation &quot;com.google.jacquard:jacquard-sdk:1.0.0&quot;\n<\/code><\/pre>\n<h2 id=\"4-add-the-scanning-recyclerview\"><a href=\"#4-add-the-scanning-recyclerview\" id=\"4-add-the-scanning-recyclerview\" class=\"anchor\"><\/a><a name=\"section4\"><\/a>4. Add the scanning RecyclerView<\/h2>\n<p>The app you will make has two screens. The first is a RecyclerView\nlisting any nearby advertising tags. The second is a screen with a few\nsimple labels and buttons which you will connect to Jacquard\nfunctions.<\/p>\n<p>First lets set up the Scanning activity.<\/p>\n<ol class=\"tutorial_list\">\n<li>Select <code>File &gt; New &gt; Activity &gt; Empty Activity<\/code>.\n<img src=\"../../assets/media/tutorial/create_main_activity.png\" alt=\"Create main activity\" />\nWe will also make this the main activity.<\/li>\n<li>Open <code>activity_main.xml<\/code> and add a RecyclerView. Your activity layout file should look something like this if you select &quot;Split&quot; view:\n<img src=\"../../assets/media/tutorial/activity_main.png\" alt=\"Main activity layout\" /><\/li>\n<\/ol>\n<p>Now we can start coding!<\/p>\n<h3 id=\"set-blue-tooth-permissions\"><a href=\"#set-blue-tooth-permissions\" id=\"set-blue-tooth-permissions\" class=\"anchor\"><\/a>Set blue tooth permissions<\/h3>\n<p>First we need to request for bluetooth permissions, which also requires fine location permission. In <code>AndroidManifest.xml<\/code>, make sure you have these\npermissions:<\/p>\n<pre><code>&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH&quot; /&gt;\n&lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&gt;\n<\/code><\/pre>\n<h3 id=\"create-recyclerview-adapter\"><a href=\"#create-recyclerview-adapter\" id=\"create-recyclerview-adapter\" class=\"anchor\"><\/a>Create RecyclerView adapter<\/h3>\n<p>We have to create an adapter to update the RecycleView's UI. Create a file named <code>TagListAdapter<\/code>. In this adapter, we are going to implement a simple\nitem UI with just the name of the tag:<\/p>\n<pre><code class=\"language-java\">public class TagListAdapter extends RecyclerView.Adapter&lt;TagListAdapter.AdvertisedJacquardTagViewHolder&gt; {\n  private List&lt;AdvertisedJacquardTag&gt; tagList;\n\n  public TagListAdapter(List&lt;AdvertisedJacquardTag&gt; tagList) {\n    this.tagList = tagList;\n  }\n\n  @NonNull\n  @Override\n  public AdvertisedJacquardTagViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n    LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());\n    View view = layoutInflater.inflate(R.layout.tag_item, parent, false);\n    return new AdvertisedJacquardTagViewHolder(view);\n  }\n\n  @Override\n  public int getItemCount() {\n    return tagList.size();\n  }\n\n  @Override\n  public void onBindViewHolder(@NonNull AdvertisedJacquardTagViewHolder holder, int position) {\n    holder.bindView(tagList.get(position).displayName());\n  }\n\n  class AdvertisedJacquardTagViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {\n\n    private final View view;\n\n    AdvertisedJacquardTagViewHolder(View itemView) {\n      super(itemView);\n      view = itemView;\n      view.setOnClickListener(this);\n    }\n\n    void bindView(String name) {\n      TextView tv = view.findViewById(R.id.tag_item_name);\n      tv.setText(name);\n    }\n\n    @Override\n    public void onClick(View v) {\n      // Item click\n    }\n  }\n}\n<\/code><\/pre>\n<p>And the layout file should look something like the following:<\/p>\n<pre><code class=\"language-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;80dp&quot;&gt;\n\n  &lt;TextView\n      android:id=&quot;@+id/tag_item_name&quot;\n      android:layout_width=&quot;match_parent&quot;\n      android:layout_height=&quot;match_parent&quot;\n      android:gravity=&quot;center_vertical&quot; /&gt;\n\n&lt;/RelativeLayout&gt;\n<\/code><\/pre>\n<h3 id=\"setup-recyclerview\"><a href=\"#setup-recyclerview\" id=\"setup-recyclerview\" class=\"anchor\"><\/a>Setup RecyclerView<\/h3>\n<p>Now switching back to your MainActivity file. First, we need to create a private variable to hold our scanned tag list:<\/p>\n<pre><code>private ArrayList&lt;AdvertisedJacquardTag&gt; tags = new ArrayList&lt;&gt;();\n<\/code><\/pre>\n<p>Then, in the <code>onCreate<\/code> method we will set our RecycleView to use the newly created TagListAdapter:<\/p>\n<pre><code>RecyclerView recyclerView = findViewById(R.id.tag_recyclerview);\nrecyclerView.setLayoutManager(new LinearLayoutManager(this));\nrecyclerView.setAdapter(new TagListAdapter(tags));\n<\/code><\/pre>\n<h2 id=\"5-displaying-the-advertised-tags-and-populating-the-recyclerview\"><a href=\"#5-displaying-the-advertised-tags-and-populating-the-recyclerview\" id=\"5-displaying-the-advertised-tags-and-populating-the-recyclerview\" class=\"anchor\"><\/a><a name=\"section5\"><\/a>5. Displaying the advertised tags and populating the RecyclerView<\/h2>\n<p>Before we can scan for tags, we'll need to request for the necessary permissions. Copy and paste the following into MainActivity:<\/p>\n<pre><code class=\"language-java\">private final ActivityResultLauncher&lt;String&gt; requestPermissionLauncher =\n    registerForActivityResult(\n        new ActivityResultContracts.RequestPermission(),\n        isGranted -&gt; {\n          if (isGranted) {\n            startScan();\n          }\n        });\n\nprivate boolean hasPermissions() {\n  if (checkSelfPermission(ACCESS_FINE_LOCATION) == PERMISSION_GRANTED) {\n    return true;\n  } else if (shouldShowRequestPermissionRationale(ACCESS_FINE_LOCATION)) {\n    // User has denied the permission. Its time to show rationale.\n    return false;\n  } else {\n    requestPermissionLauncher.launch(ACCESS_FINE_LOCATION);\n    return false;\n  }\n}\n<\/code><\/pre>\n<p>Now create a <code>onResume<\/code> method and put the following in <code>onResume<\/code>. This will request the permission if necessary whenever we come back to this screen.<\/p>\n<pre><code>if (hasPermissions()) {\n  startScan();\n}\n<\/code><\/pre>\n<h3 id=\"scan-for-advertising-jacquard-tags\"><a href=\"#scan-for-advertising-jacquard-tags\" id=\"scan-for-advertising-jacquard-tags\" class=\"anchor\"><\/a>Scan for advertising Jacquard tags<\/h3>\n<p>Now we will create the startScan method that was used in <code>onResume<\/code> and put our tag scanning codes inside.\nThis will start scanning for advertising Jacquard tags whenever the activity is back on screen.<\/p>\n<pre><code class=\"language-java\">private void startScan() {\n    JacquardManager jacquardManager = JacquardManager.getInstance();\n    Signal&lt;List&lt;AdvertisedJacquardTag&gt;&gt; scanningSignal = jacquardManager.startScanning()\n        .distinct()\n        .scan(tags,\n            (tagList, tag) -&gt; {\n              tagList.add(tag);\n              return tagList;\n            });\n    scanningSignal.onNext(tagList -&gt; {\n      // Notify RecyclerView adapter to update the list\n      RecyclerView recyclerView = findViewById(R.id.tag_recyclerview);\n      recyclerView.getAdapter().notifyDataSetChanged();\n    });\n}\n<\/code><\/pre>\n<h3 id=\"put-the-jacquard-tag-into-advertising-mode\"><a href=\"#put-the-jacquard-tag-into-advertising-mode\" id=\"put-the-jacquard-tag-into-advertising-mode\" class=\"anchor\"><\/a>Put the Jacquard Tag into advertising mode<\/h3>\n<p>Press and hold the button on your tag for 3 or 4 seconds. The LED on\nthe tag will start pulsing.<\/p>\n<p>You should be able to the RecyclerView updated with your Jacquard Tag name.<\/p>\n<h2 id=\"6-displaying-already-connected-tag\"><a href=\"#6-displaying-already-connected-tag\" id=\"6-displaying-already-connected-tag\" class=\"anchor\"><\/a><a name=\"section6\"><\/a>6. Displaying already connected tag<\/h2>\n<p>When the tag is paired and connected to Android, it will no longer advertise.\nInstead, the list of tags already known and connected to Android can be retrieved.\nTo achieve this, when user tries to pair to the ujt through sample app,\ntag info should be saved to the shared preferences. Its totally upto you,\nhow you want to implement it.<\/p>\n<pre><code class=\"language-java\">private void savePairedDevices(KnownTag tag) {\n  Set&lt;KnownTag&gt; pairedTags = new HashSet&lt;&gt;(preferences.getPairedTags());\n  pairedTags.add(tag);\n  preferences.putPairedDevices(pairedTags);\n}\n<\/code><\/pre>\n<h2 id=\"7-connecting-to-tags\"><a href=\"#7-connecting-to-tags\" id=\"7-connecting-to-tags\" class=\"anchor\"><\/a><a name=\"section7\"><\/a>7. Connecting to tags<\/h2>\n<p>Connecting to tags is an important step that is fully documented in the api documentation.<\/p>\n<h3 id=\"connecting-to-the-tag\"><a href=\"#connecting-to-the-tag\" id=\"connecting-to-the-tag\" class=\"anchor\"><\/a>Connecting to the tag<\/h3>\n<p>When user tries to pair with a selected tag, you can use either of the below apis -<\/p>\n<pre><code class=\"language-java\">jacquardManager.connect(address);\n<\/code><\/pre>\n<p>OR<\/p>\n<pre><code class=\"language-java\">jacquardManager.connect(advertisedJacquardTag);\n<\/code><\/pre>\n<p>Both the apis will emit <code>ConnectionState<\/code>. You should monitor <code>ConnectionState.getType()<\/code> to know\nexact progress of pairing. Your application can get <code>ConnectedJacquardTag<\/code> as per below sample code -<\/p>\n<pre><code class=\"language-java\">public Signal&lt;ConnectedJacquardTag&gt; getConnectedTagSignal() {       \n  return jacquardManager.connect(address)\n          .filter(state -&gt; state.isType(CONNECTED))\n          .map(state -&gt; state.connected());\n}\n<\/code><\/pre>\n<p>Congratulations, your app will now show an advertising tag, connect to\nit. Try it now (and don't forget to press the tag's button for four seconds\nto restart pairing mode).<\/p>\n"
        }]
      },
      "codelabs": {
        "ownKey": "codelabs",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "/JacquardSDKAndroid",
            "fileName": "codelabs",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "/JacquardSDKAndroid/wiki/codelabs"
          },
          "next": {
            "path": "wiki",
            "baseUrl": "/JacquardSDKAndroid",
            "fileName": "integration",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "/JacquardSDKAndroid/wiki/integration"
          },
          "previous": {
            "path": "wiki",
            "baseUrl": "/JacquardSDKAndroid",
            "fileName": "tutorial",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "/JacquardSDKAndroid/wiki/tutorial"
          },
          "description": "",
          "title": "CodeLabs",
          "content": "<p>You have now successfully integrated the Jacquard SDK and learned how to find and connect to Jacquard\ntags. There's more to the SDK which you can explore in a few different ways.<\/p>\n<h2 id=\"table-of-contents\"><a href=\"#table-of-contents\" id=\"table-of-contents\" class=\"anchor\"><\/a>Table of contents<\/h2>\n<ol>\n<li><a href=\"#section1\">Sending commands<\/a><\/li>\n<li><a href=\"#section2\">Observing Notifications<\/a><\/li>\n<li><a href=\"#section3\">Updating firmware<\/a><\/li>\n<li><a href=\"#section4\">Motion Capture<\/a><\/li>\n<\/ol>\n<h2 id=\"1-sending-commands\"><a href=\"#1-sending-commands\" id=\"1-sending-commands\" class=\"anchor\"><\/a><a name=\"section1\"><\/a>1. Sending commands<\/h2>\n<p>Now we'll explore sending commands to the tag, in this case\n<code>RenameTagCommand<\/code>, but commands are documented fully in the\napi documentation.<\/p>\n<p>When you have <code>ConnectedJacquardTag<\/code> available, you can enqueue commands which will be sent to\nthe tag in sequential manner as below -<\/p>\n<pre><code class=\"language-java\">public Signal&lt;String&gt; renameTag(String tagName) {\n  return connectedJacquardTag\n          .enqueue(new RenameTagCommand(tagName)));\n}\n<\/code><\/pre>\n<p>Note - Your app should listen for command success as well as failures both as below -<\/p>\n<pre><code class=\"language-java\">updateTagName(&quot;NewTagName&quot;).observe(new Observer&lt;String&gt;() {\n  @Override\n  public void onNext(@NonNull String s) {\n    // SUCCESS\n  }\n\n  @Override\n  public void onError(@NonNull Throwable t) {\n    // FAILURE\n  }\n\n  @Override\n  public void onComplete() {\n  }\n});\n<\/code><\/pre>\n<p><code>ConnectedJacquardTag.enqueue(Request command, int retries)<\/code> this api will give you ability to retry\nsending same request multiple times if it fails in prior attempt.<\/p>\n<h2 id=\"2-observing-notifications\"><a href=\"#2-observing-notifications\" id=\"2-observing-notifications\" class=\"anchor\"><\/a><a name=\"section2\"><\/a>2. Observing Notifications<\/h2>\n<p>Commands are initiated by the app and sent to the tag (possibly with a\nresponse). Notifications on the other hand originate from the tag at\nany time. We can ask to be notified any time a notification of\ninterest occurs.<\/p>\n<p>To get the tag battery notifiations -<\/p>\n<pre><code class=\"language-java\">private Signal&lt;BatteryStatus&gt; getBatteryNotifications(ConnectedJacquardTag tag) {\n  return tag.subscribe(new BatteryStatusNotificationSubscription());\n}\n<\/code><\/pre>\n<p>To get tag attach-detach notifications -<\/p>\n<pre><code class=\"language-java\">private Signal&lt;GearState&gt; getGearNotifications(ConnectedJacquardTag tag) {\n  return tag.getConnectedGearSignal();\n}\n<\/code><\/pre>\n<p>Once you have <code>ConnectedJacquardTag<\/code>, you can insert tag into  Jacquard gear and\nobserve for the gesture events as below -<\/p>\n<pre><code class=\"language-java\">private Signal&lt;Gesture&gt; getGestures(ConnectedJacquardTag tag) {\n  return tag.subscribe(new GestureNotificationSubscription());\n}\n<\/code><\/pre>\n<p>You have now successfully integrated the Jacquard SDK and learned how\nto connect, send commands and observe notifications. There's more to\nthe SDK which you can see demonstrated in the <a href=\"https://github.com/google/JacquardSDKAndroid\">sample\napp<\/a> and read about in the\nSDK documentation (see the table of contents on the left side of this\npage).<\/p>\n<h2 id=\"3-updating-firmware\"><a href=\"#3-updating-firmware\" id=\"3-updating-firmware\" class=\"anchor\"><\/a><a name=\"section3\"><\/a>3. Updating firmware<\/h2>\n<p>Before using any Jacquard SDK core api, it is always recommended to ensure that you have the latest\navailable firmware. When your tag is paired, next ideal step should be to check for firmware update\nby calling Jacquard firmware apis which are backed up by Jacquard cloud.\nUpdating firmware is a 3 step process -<\/p>\n<h4 id=\"1-check-if-update-available\"><a href=\"#1-check-if-update-available\" id=\"1-check-if-update-available\" class=\"anchor\"><\/a>1. Check if update available<\/h4>\n<p>This step would need internet connectivity as it calls Jacquard cloud api to see if any firmware\nupdates are available. If update are available for your current firmware either MANDATORY or\nOPTIONAL, sdk will start downloading firmware binary implicitly. This step will be completed when\nfirmware binary is downloaded successfully. You do not need to worry about downloaded binary, sdk\nwill use it when you try to apply the updates.<\/p>\n<h4 id=\"2-apply-updates\"><a href=\"#2-apply-updates\" id=\"2-apply-updates\" class=\"anchor\"><\/a>2. Apply updates<\/h4>\n<p>Jacquard sdk will transfer downloaded firmware binary to the tag using bluetooth high priority\nconnection. This step might take a while depending on the size of downloaded firmware binary.<\/p>\n<h4 id=\"3-execute-updates\"><a href=\"#3-execute-updates\" id=\"3-execute-updates\" class=\"anchor\"><\/a>3. Execute updates<\/h4>\n<p>In this step, Jacquard sdk will install the firmware binary on the tag. If you have send\n<code>autoExecute=true<\/code> in step 2, you can skip this step. For tag and interposer firmware update, this\nis a mandatory step however in case of loadable module, this step is not required.<\/p>\n<p>Let's start with the implementation. It's pretty much straight forward.<\/p>\n<ul>\n<li>\n<h4 id=\"update-tag--interposer-firmware\"><a href=\"#update-tag--interposer-firmware\" id=\"update-tag--interposer-firmware\" class=\"anchor\"><\/a>Update tag / interposer firmware<\/h4>\n<\/li>\n<\/ul>\n<h5 id=\"1-check-if-update-available--\"><a href=\"#1-check-if-update-available--\" id=\"1-check-if-update-available--\" class=\"anchor\"><\/a>1. Check if update available -<\/h5>\n<p>To check if update is available for both tag and interposer, insert your tag into your\ngear and use below piece of code -<\/p>\n<pre><code class=\"language-java\">public Signal&lt;List&lt;DFUInfo&gt;&gt; checkFirmware(boolean forceUpdate) {\n  return connectedJacquardTag.dfuManager().checkFirmware(connectedJacquardTag.getComponents(), forceUpdate);\n}\n<\/code><\/pre>\n<p>This code will return list of <code>DFUInfo<\/code> for each input component. Check the value for\n<code>DFUInfo.dfuStatus()<\/code> to know what type of firmware update is available. It could be either\n<code>MANDATORY<\/code> or <code>OPTIONAL<\/code> or <code>NOT_AVAILABLE<\/code>. You can set <code>forceUpdate<\/code> as <code>true<\/code> to always hit the\ncloud ignoring the local cache. To get firmare updates from local cache, set <code>forceUpdate<\/code> as <code>false<\/code>.<\/p>\n<h5 id=\"2-apply-updates--\"><a href=\"#2-apply-updates--\" id=\"2-apply-updates--\" class=\"anchor\"><\/a>2. Apply updates -<\/h5>\n<p>Here, Jacquard sdk will transfer downloaded firmware binary from mobile to the tag. You need to use\nlist of <code>DFUInfo<\/code> which you have received in previous step.<\/p>\n<pre><code class=\"language-java\">public Signal&lt;FirmwareUpdateState&gt; applyUpdates(List&lt;DFUInfo&gt; dfuInfos, boolean autoExecute){\n  return connectedJacquardTag.dfuManager().applyUpdates(dfuInfos, autoExecute);\n}\n<\/code><\/pre>\n<p><code>FirmwareUpdateState<\/code> returned will give you the exact status of the operation. When Jacquard sdk\nstarts transferring firmware binary to the tag i.e. state is <code>TRANSFER_PROGRESS<\/code>, you can track the\ntransfer progress using <code>FirmwareUpdateState#transferProgress<\/code>. You can use <code>autoExecute=true<\/code> to\ninstall the updates automatically otherwise you need to call below <code>executeUpdates()<\/code> api explicitly.\n<code>FirwareUpdateState.error()<\/code> will give you the error occurred in this step.<\/p>\n<h5 id=\"3-execute-updates--\"><a href=\"#3-execute-updates--\" id=\"3-execute-updates--\" class=\"anchor\"><\/a>3. Execute updates -<\/h5>\n<p>This is the last step in firmware update in which Jacquard sdk instructs tag to install the firmware\nbinary transferred in previous step. This step is not required if you are sending <code>autoExecute=true<\/code>\nin <code>applyUpdates()<\/code> api. If you are updating tag firmware, tag will reboot during this step.<\/p>\n<pre><code class=\"language-java\">public Signal&lt;FirmwareUpdateState&gt; executeFirmware(){\n  return connectedJacquardTag.dfuManager().executeUpdates();\n}\n<\/code><\/pre>\n<p><code>FirmwareUpdateState<\/code> returned by this api can either be <code>EXECUTING<\/code> or <code>COMPLETED<\/code>.<\/p>\n<ul>\n<li>\n<h4 id=\"update-loadable-module\"><a href=\"#update-loadable-module\" id=\"update-loadable-module\" class=\"anchor\"><\/a>Update Loadable Module<\/h4>\n<\/li>\n<\/ul>\n<h5 id=\"1-check-if-update-available---1\"><a href=\"#1-check-if-update-available---1\" id=\"1-check-if-update-available---1\" class=\"anchor\"><\/a>1. Check if update available -<\/h5>\n<p>You can execute <code>ListModulesCommand<\/code> command to fetch all loadable modules present on the tag. This\ncommand will give you <code>List&lt;Module&gt;<\/code>. Similar to tag &amp; interposer firmware update, first step here\nis also to check if update is available using below api -<\/p>\n<pre><code class=\"language-java\">public Signal&lt;DFUInfo&gt; checkModuleUpdate(Module module) {\n  return connectedJacquardTag.dfuManager().checkModuleUpdate(module);\n}\n<\/code><\/pre>\n<p>This code will return <code>DFUInfo<\/code> for <code>Module<\/code> used as input. Check the value for\n<code>DFUInfo.dfuStatus()<\/code> to know what type of update is available. It could be either\n<code>MANDATORY<\/code> or <code>OPTIONAL<\/code> or <code>NOT_AVAILABLE<\/code>. Please note that <code>checkModuleUpdate<\/code> will always fetch\nupdates from cloud bypassing the local cache.<\/p>\n<h5 id=\"2-apply-module-updates--\"><a href=\"#2-apply-module-updates--\" id=\"2-apply-module-updates--\" class=\"anchor\"><\/a>2. Apply module updates -<\/h5>\n<p>This step is pretty much similar to step 2 of tag &amp; interposer updates. Use below piece of code to\nstart sending firmware binary to the tag.<\/p>\n<pre><code class=\"language-java\">public Signal&lt;FirmwareUpdateState&gt; applyModuleUpdate(DFUInfo dfuInfo){\n  return connectedJacquardTag.dfuManager().applyModuleUpdate(dfuInfo);\n}\n<\/code><\/pre>\n<p><code>FirmwareUpdateState<\/code> returned will give you the exact status of the operation. When Jacquard sdk\nstarts transferring firmware binary to the tag i.e. state is <code>TRANSFER_PROGRESS<\/code>, you can track the\ntransfer progress using <code>FirmwareUpdateState#transferProgress<\/code>. Keep watching\n<code>FirwareUpdateState.error()<\/code> for any errors occurred in this step.<\/p>\n<h5 id=\"3-execute-module-updates--\"><a href=\"#3-execute-module-updates--\" id=\"3-execute-module-updates--\" class=\"anchor\"><\/a>3. Execute module updates -<\/h5>\n<p>There is no need to install/execute lodable module firmware as such. Once loadble module binary is\ntransferred to the tag, you are good to play around with it.<\/p>\n<ul>\n<li>\n<h4 id=\"interrupt-firmware-update-process\"><a href=\"#interrupt-firmware-update-process\" id=\"interrupt-firmware-update-process\" class=\"anchor\"><\/a>Interrupt firmware update process<\/h4>\n<\/li>\n<\/ul>\n<p>Call below api if you want to cancel firmware update process at any point.<\/p>\n<pre><code class=\"language-java\">public void stop() {\n  connectedJacquardTag.dfuManager().stop();\n}\n<\/code><\/pre>\n<h2 id=\"4-motion-capture\"><a href=\"#4-motion-capture\" id=\"4-motion-capture\" class=\"anchor\"><\/a><a name=\"section4\"><\/a>4. Motion Capture<\/h2>\n<p>With this feature, you can record, view and download your tag's Inertial Measurement Unit\n(IMU) motion sensor data: accelerometer (x, y, z), and gyroscope (yaw, pitch, roll) data. This section\nwill guide you to record, download, parse, erase Imu session. If you want the tag should collect Imu\nsamples, loadable module must be activated, but it will disable Wake on Motion(WoM) on the tag and\nyou can easily notice that tag battery is draining quickly.<\/p>\n<h4 id=\"1-instantiate\"><a href=\"#1-instantiate\" id=\"1-instantiate\" class=\"anchor\"><\/a>1. Instantiate<\/h4>\n<p>You can create instance of <code>ImuModule<\/code> using <code>ConnectedJacquardTag<\/code> as below -<\/p>\n<pre><code class=\"language-java\">    new ImuModule(connectedJacquardTag);\n<\/code><\/pre>\n<h4 id=\"2-initialize\"><a href=\"#2-initialize\" id=\"2-initialize\" class=\"anchor\"><\/a>2. Initialize<\/h4>\n<p>This is a mandatory step before you start recording IMU samples. There are multiple steps involved\nduring initialize process. Initialize process will be quicker when Data Collection Loadable Module\n(DCLM) is present on the tag and its activated. If DCLM is not present on the tag, <code>ImuModule<\/code> will\nperform device firmware update to download DCLM binary from cloud and send it to the tag. Once DFU\nis successful, <code>ImuModule<\/code> will activate the DCLM to finish initialize process.<\/p>\n<pre><code class=\"language-java\">    Signal&lt;InitState&gt; initialize();\n<\/code><\/pre>\n<p>This api gives you every step involved in initialize process by sending <code>InitState<\/code>. Below could be\nmultiple initialize states <br />\n1. <strong>INIT -<\/strong> Sdk will fetch LM modules from ujt and checks if present and activated. <br />\n2. <strong>CHECK_FOR_UPDATES -<\/strong> Repeated. If LM is not present, sdk will check if Dfu is needed for\nujt &amp; DC LM.  <br />\n3. <strong>TAG_DFU -<\/strong> Sdk is performing ujt firmware update. This is Imu Init state but it will have\n<code>FirmwareUpdateState<\/code> bundled inside so that the app could know exact progress for ujt dfu.\n<code>AutoExecute<\/code> will be <code>true<\/code> for tag dfu. <br />\n4. <strong>MODULE_DFU -<\/strong> Sdk will be performing dfu for DC LM to the ujt. This is Imu Init state but\nit will have <code>FirmwareUpdateState<\/code> bundled inside so that the app could know exact progress for\ndc lm dfu. <br />\n5. <strong>ACTIVATE -<\/strong> At this state, sdk will try to activate DC LM. <br />\n6. <strong>INITIALIZED -<\/strong> ImuModule is now ready to use.<\/p>\n<h4 id=\"3-start--stop-imu-session\"><a href=\"#3-start--stop-imu-session\" id=\"3-start--stop-imu-session\" class=\"anchor\"><\/a>3. Start &amp; stop Imu session<\/h4>\n<p>You can start collecting Imu samples by calling <code>Signal&lt;String&gt; startImuSession()<\/code> api. This api\nreturns unique Imu session id which is nothing but unix timestamp in seconds. Call <code>Signal&lt;Boolean&gt; stopImuSession()<\/code> to end current Imu session. Important point to remember here is that - you should\nnot attach/detach the tag from gear during Imu session. Which means - while starting a new Imu session\nwhichever is the gear state, either attached or detached, must be same till you call <code>stopImuSession()<\/code>\napi.<\/p>\n<h4 id=\"4-fetch-imu-session-list\"><a href=\"#4-fetch-imu-session-list\" id=\"4-fetch-imu-session-list\" class=\"anchor\"><\/a>4. Fetch Imu session list<\/h4>\n<pre><code class=\"language-java\">public Signal&lt;List&lt;ImuSessionInfo&gt;&gt; getImuSessionsList() {\n  return imuModule.getImuSessionsList();\n}\n<\/code><\/pre>\n<p>Use above code to fetch list of Imu sessions present on the tag. It will return <code>List&lt;ImuSessionInfo&gt;<\/code>.\nIf there active Imu session on the tag, you can't call this api.<\/p>\n<h4 id=\"5-download-imu-session\"><a href=\"#5-download-imu-session\" id=\"5-download-imu-session\" class=\"anchor\"><\/a>5. Download Imu session<\/h4>\n<p>To download recorded Imu session data from the tag to your mobile, use below code  -<\/p>\n<pre><code class=\"language-java\">public Signal&lt;Pair&lt;Integer, File&gt;&gt; downloadImuData(ImuSessionInfo info) { \n    return imuModule.downloadImuData(info);\n}\n<\/code><\/pre>\n<p>OR<\/p>\n<pre><code class=\"language-java\">public Signal&lt;Pair&lt;Integer, File&gt;&gt; downloadImuData(String imuSessionId) { \n    return imuModule.downloadImuData(imuSessionId);\n}\n<\/code><\/pre>\n<p>Both apis gives you download progress and file handle where Imu session data will be saved. As tag has\nlimited storage, to free up the space, it's highly recommended to erase Imu session from the tag\nafter it's downloaded to the mobile device. If there active Imu session on the tag, you can't call\nthis api. To cancel in-progress downloading, you can simply <code>unsubscribe()<\/code> from observable returned\nby above api.<\/p>\n<h4 id=\"6-erase-imu-sessions\"><a href=\"#6-erase-imu-sessions\" id=\"6-erase-imu-sessions\" class=\"anchor\"><\/a>6. Erase Imu session(s)<\/h4>\n<p>You can either choose to delete a specific Imu session or all sessions from the tag. There are\noverloaded apis available -<\/p>\n<pre><code class=\"language-java\">public Signal&lt;Boolean&gt; erase(@NonNull ImuSessionInfo session) {\n  return imuModule.erase(session);\n}\n<\/code><\/pre>\n<p>OR<\/p>\n<pre><code class=\"language-java\">public Signal&lt;Boolean&gt; erase(@NonNull String sessionId) {\n  return imuModule.erase(sessionId);\n}\n<\/code><\/pre>\n<p>OR<\/p>\n<pre><code class=\"language-java\">public Signal&lt;Boolean&gt; eraseAll() {\n  return imuModule.eraseAll();\n}\n<\/code><\/pre>\n<h4 id=\"7-parse-imu-session-data\"><a href=\"#7-parse-imu-session-data\" id=\"7-parse-imu-session-data\" class=\"anchor\"><\/a>7. Parse Imu session data<\/h4>\n<p>Once you download the Imu session to the mobile device, now its time to parse that session data to\nview Imu samples. You can input downloaded session file to below api to parse Imu session.<\/p>\n<pre><code class=\"language-java\">public Signal&lt;ImuSessionData&gt; parseImuData(@NonNull final String path) {\n  return ImuModule.parseImuData(path);\n}\n<\/code><\/pre>\n<h4 id=\"8-get-data-collection-status\"><a href=\"#8-get-data-collection-status\" id=\"8-get-data-collection-status\" class=\"anchor\"><\/a>8. Get Data Collection status<\/h4>\n<p>To know the current data collection status if the tag, use below code -<\/p>\n<pre><code class=\"language-java\">  public Signal&lt;DataCollectionStatus&gt; getDataCollectionStatus() {\n    return imuModule.getDataCollectionStatus();\n  }\n<\/code><\/pre>\n<p>If <code>DataCollectionStatus<\/code> is <code>DATA_COLLECTION_LOGGING<\/code> means there is active Imu session\non the tag and tag is recording Imu samples.<\/p>\n<h4 id=\"9-deactivate-data-collection-loadable-module\"><a href=\"#9-deactivate-data-collection-loadable-module\" id=\"9-deactivate-data-collection-loadable-module\" class=\"anchor\"><\/a>9. Deactivate Data Collection Loadable Module<\/h4>\n<p>When there is no active Imu session, you must deactivate/unload data collection loadable module to\nsave the tag battery. When lodable module is disabled, Wake on Motion(WoM) will be activated on the\ntag and if idle for 10 mins, tag will go to sleep to preserve the battery.<\/p>\n<pre><code class=\"language-java\">  public Signal&lt;Boolean&gt; unloadModule() {\n    return imuModule.unloadModule();\n  }\n<\/code><\/pre>\n"
        }]
      },
      "generate-docs": {
        "ownKey": "generate-docs",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "/JacquardSDKAndroid",
            "fileName": "generate-docs",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "/JacquardSDKAndroid/wiki/generate-docs"
          },
          "next": {
            "path": "wiki",
            "baseUrl": "/JacquardSDKAndroid",
            "fileName": "releases",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "/JacquardSDKAndroid/wiki/releases"
          },
          "previous": {
            "path": "wiki",
            "baseUrl": "/JacquardSDKAndroid",
            "fileName": "apis",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "/JacquardSDKAndroid/wiki/apis"
          },
          "description": "",
          "title": "Generate docs",
          "content": "<p>We\u2019re using <a href=\"https://orchid.run/\">Orchid<\/a> to generate a static website for Jacquard sdk. Orchid also\nparses sdk java packages and integrates the JavaDoc into the website.<\/p>\n<h2 id=\"running-orchid\"><a href=\"#running-orchid\" id=\"running-orchid\" class=\"anchor\"><\/a>Running Orchid<\/h2>\n<h3 id=\"prerequisites-\"><a href=\"#prerequisites-\" id=\"prerequisites-\" class=\"anchor\"><\/a>Prerequisites :<\/h3>\n<p>Orchid does not generate api java docs with java8. Before running Orchid, make sure <strong>java11<\/strong> is\ninstalled on your machine. If not installed, you can install <code>java11<\/code> either from the terminal by\nrunning this command <code>$sudo mule install jdk11<\/code> or other convenient way for you.<\/p>\n<h3 id=\"run-development-server-\"><a href=\"#run-development-server-\" id=\"run-development-server-\" class=\"anchor\"><\/a>Run Development Server :<\/h3>\n<ul>\n<li>Navigate to the <code>sdk/sdk<\/code> folder of the repo.<\/li>\n<li>In the terminal, run <code>../gradlew :docs:orchidServe<\/code>.<\/li>\n<li>When successful, you should see below message :<\/li>\n<\/ul>\n<pre><code>Build Complete\nGenerated 122 pages in 12s 324ms\n\nWebserver Running at http://localhost:8080\nHit [CTRL-C] to stop the server and quit Orchid\n<\/code><\/pre>\n<ul>\n<li>Now open a browser and navigate to http://localhost:8080 to see your static website.<\/li>\n<\/ul>\n<h3 id=\"generate-html-build\"><a href=\"#generate-html-build\" id=\"generate-html-build\" class=\"anchor\"><\/a>Generate HTML Build:<\/h3>\n<ul>\n<li>Update <code>docs/build.gradle<\/code> file to edit <code>baseUrl<\/code> so as to match to the base URL of the host<\/li>\n<\/ul>\n<pre><code>orchid {\n   ...\n   baseUrl = &quot;/&lt;Your-website-directory&gt;/&quot;\n}\n<\/code><\/pre>\n<ul>\n<li>In Terminal Navigate to the <code>sdk/sdk<\/code> folder of the repo.<\/li>\n<li>Run <code>$../gradlew :docs:orchidBuild<\/code>.<\/li>\n<li>When successful, copy all files from <code>$&lt;repo&gt;/docs/build/docs/orchid/<\/code> to <code>Your-website-directory<\/code>\ninside your web server deployment directory.<\/li>\n<\/ul>\n"
        }]
      },
      "releases": {
        "ownKey": "releases",
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "/JacquardSDKAndroid",
            "fileName": "releases",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "/JacquardSDKAndroid/wiki/releases"
          },
          "next": {
            "path": "wiki",
            "baseUrl": "/JacquardSDKAndroid",
            "fileName": "license",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "/JacquardSDKAndroid/wiki/license"
          },
          "previous": {
            "path": "wiki",
            "baseUrl": "/JacquardSDKAndroid",
            "fileName": "generate-docs",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "/JacquardSDKAndroid/wiki/generate-docs"
          },
          "description": "",
          "title": "Releases",
          "content": "<h2 id=\"versioning\"><a href=\"#versioning\" id=\"versioning\" class=\"anchor\"><\/a>Versioning<\/h2>\n<p>The Jacquard SDK uses <a href=\"https://semver.org/\">Semantic Versioning<\/a>. The main goal and property of Semantic Versioning is to give users of an SDK the safety of upgrading knowing what versions will and will not break code compatibility.<\/p>\n<p>In summary:<\/p>\n<blockquote>\n<p>Given a version number MAJOR.MINOR.PATCH, increment the:<\/p>\n<p> <\/p>\n<ol>\n<li>\n<p>MAJOR version when you make incompatible API changes,<\/p>\n<\/li>\n<li>\n<p>MINOR version when you add functionality in a backwards compatible manner, and<\/p>\n<\/li>\n<li>\n<p>PATCH version when you make backwards compatible bug fixes. Additional labels for pre-release and build metadata are available as extensions to the MAJOR.MINOR PATCH format.<\/p>\n<\/li>\n<\/ol>\n<\/blockquote>\n<h2 id=\"releases\"><a href=\"#releases\" id=\"releases\" class=\"anchor\"><\/a>Releases<\/h2>\n<h3 id=\"initial-release---version-010---may-10-2021\"><a href=\"#initial-release---version-010---may-10-2021\" id=\"initial-release---version-010---may-10-2021\" class=\"anchor\"><\/a>Initial release - Version 0.1.0 - May 10, 2021<\/h3>\n<p>This is the initial release.<\/p>\n<h3 id=\"version-020---october-25-2021\"><a href=\"#version-020---october-25-2021\" id=\"version-020---october-25-2021\" class=\"anchor\"><\/a>Version 0.2.0 - October 25, 2021<\/h3>\n<ol>\n<li>Open sourced SDK.<\/li>\n<li>Record, store and send IMU data.<\/li>\n<li>New Sample App example called 'Places'.<\/li>\n<li>Improved Tag LED settings in sample app.<\/li>\n<li>Device firmware upgrade via Cloud API.<\/li>\n<li>Bug fixes.<\/li>\n<li>Documentation Improvements.<\/li>\n<\/ol>\n<h3 id=\"version-100---november-14-2022\"><a href=\"#version-100---november-14-2022\" id=\"version-100---november-14-2022\" class=\"anchor\"><\/a>Version 1.0.0 - November 14, 2022<\/h3>\n<ol>\n<li>Real time streaming of IMU data.<\/li>\n<li>Multi tag support - DFU &amp; LEDs.<\/li>\n<li>Custom Proto support for custom UJT modules<\/li>\n<li>Improved UJT reconnections.<\/li>\n<li>Bug fixes.<\/li>\n<\/ol>\n"
        }]
      }
    },
    "ownPages": [{
      "reference": {
        "path": "",
        "baseUrl": "/JacquardSDKAndroid",
        "fileName": "wiki",
        "extension": "html",
        "usePrettyUrl": true,
        "link": "/JacquardSDKAndroid/wiki"
      },
      "description": "",
      "title": "Wiki",
      "content": "<html>\n <head><\/head>\n <body>\n  <ul> \n   <li><a href=\"/JacquardSDKAndroid/wiki/tutorial\">Tutorial<\/a><\/li> \n   <li><a href=\"/JacquardSDKAndroid/wiki/codelabs\">CodeLabs<\/a><\/li> \n   <li><a href=\"/JacquardSDKAndroid/wiki/integration\">Integration<\/a><\/li> \n   <li><a href=\"/JacquardSDKAndroid/wiki/apis\">API overview<\/a><\/li> \n   <li><a href=\"/JacquardSDKAndroid/wiki/generate-docs\">Generate docs<\/a><\/li> \n   <li><a href=\"/JacquardSDKAndroid/wiki/releases\">Releases<\/a><\/li> \n   <li><a href=\"/JacquardSDKAndroid/wiki/license\">License<\/a><\/li> \n   <li><a href=\"/JacquardSDKAndroid/wiki/cloud-api-terms\">Cloud API Terms<\/a><\/li> \n   <li><a href=\"/JacquardSDKAndroid/wiki/contributing\">Contributing<\/a><\/li> \n   <li><a href=\"/JacquardSDKAndroid/wiki/conduct\">Code of Conduct<\/a><\/li> \n  <\/ul> \n <\/body>\n<\/html>\n"
    }]
  }}
}